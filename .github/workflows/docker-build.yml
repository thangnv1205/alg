name: Docker Multi-Language Build

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-docker-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [javascript, python, java, c, cpp, go, rust, scala, all]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image for ${{ matrix.language }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.language }}
          push: secrets.DOCKER_USERNAME && secrets.DOCKER_PASSWORD
          tags: |
            ${{ secrets.DOCKER_USERNAME || 'algorithms' }}/algorithms-${{ matrix.language }}:latest
            ${{ secrets.DOCKER_USERNAME || 'algorithms' }}/algorithms-${{ matrix.language }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-docker-images:
    needs: [build-docker-images]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [javascript, python, java, c, cpp, go, rust, scala]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Docker image
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            ${{ secrets.DOCKER_USERNAME || 'algorithms' }}/algorithms-${{ matrix.language }}:latest \
            /bin/bash -c "
              cd /workspace && 
              find . -name '*.${{ matrix.language }}' -not -path './node_modules/*' -not -path './scripts/*' | head -5 | while read file; do
                echo 'Testing: $file'
                case '${{ matrix.language }}' in
                  'javascript') node \"$file\" || true ;;
                  'python') python3 \"$file\" || true ;;
                  'java') javac \"$file\" && java \"\${file%.java}\" || true ;;
                  'c') gcc \"$file\" -o temp && ./temp && rm temp || true ;;
                  'cpp') g++ \"$file\" -o temp && ./temp && rm temp || true ;;
                  'go') go run \"$file\" || true ;;
                  'rust') rustc \"$file\" -o temp && ./temp && rm temp || true ;;
                  'scala') scalac \"$file\" && scala \"\${file%.scala}\" || true ;;
                esac
              done
            "

  deploy-docker-compose:
    needs: [build-docker-images, test-docker-images]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying multi-language algorithm environment..."
          # This would typically deploy to your production environment
          # For example, using docker-compose or Kubernetes
          
          cat > docker-compose.prod.yml << EOF
          version: '3.8'
          services:
            algorithms-api:
              image: ${{ secrets.DOCKER_USERNAME || 'algorithms' }}/algorithms-all:latest
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
              volumes:
                - ./algorithms:/app/algorithms
                - ./results:/app/results
              
            algorithms-worker:
              image: ${{ secrets.DOCKER_USERNAME || 'algorithms' }}/algorithms-all:latest
              command: ["node", "scripts/worker.js"]
              environment:
                - NODE_ENV=production
              volumes:
                - ./algorithms:/app/algorithms
                - ./results:/app/results
          EOF
          
          echo "Docker Compose configuration created for production deployment"
